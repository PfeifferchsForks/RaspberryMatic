--- occu/WebUI/www/api/backup/version.cgi.orig
+++ occu/WebUI/www/api/backup/version.cgi
@@ -1 +1,11 @@
-### rfd-config##source common.tclproc main { } {	puts "Content-Type: text/plain"	puts ""	puts -nonewline [loadFile /boot/VERSION]}startup
\ No newline at end of file
+##
+# rfd-config
+##
+source common.tcl
+proc main { } {
+ puts "Content-Type: text/plain"
+ puts ""
+ puts -nonewline [loadFile /VERSION]
+}
+
+startup
--- occu/WebUI/www/config/backup.tcl.orig
+++ occu/WebUI/www/config/backup.tcl
@@ -5,35 +5,48 @@
 load tclrpc.so
 load tclrega.so
 
+proc read_var { filename varname} {
+  set fd [open $filename r]
+  set var ""
+  if { $fd >=0 } {
+    while { [gets $fd buf] >=0 } {
+      if [regexp "^ *$varname *= *(.*)$" $buf dummy var] break
+    }
+    close $fd
+  }
+  return $var
+}
+
+proc read_version { filename } {
+  return [read_var $filename VERSION]
+}
+
 proc create_backup {} {
   set HOSTNAME [exec hostname]
+  set system_version [read_version "/VERSION"]
   set iso8601_date [exec date -Iseconds]
+  set tmpdir [exec mktemp -d -p /usr/local/tmp]
   regexp {^(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+)([+-]\d+)$} $iso8601_date dummy year month day hour minute second zone
+  set backupfile [set HOSTNAME]-$system_version-$year-$month-$day-$hour$minute.sbk
   #save DOM
   rega system.Save()
   cd /
   if {[getProduct] < 3 } {
     catch { exec tar czf /tmp/usr_local.tar.gz usr/local }
   } else {
-    catch { exec tar --owner=root --group=root --exclude=usr/local/tmp --exclude=/usr/local/.firmwareUpdate --exclude=usr/local/lost+found --exclude=usr/local/eQ-3-Backup --exclude-tag=.nobackup --one-file-system --ignore-failed-read -czf /tmp/usr_local.tar.gz usr/local }
+    catch { exec tar --owner=root --group=root --exclude=usr/local/tmp --exclude=usr/local/lost+found --exclude=usr/local/eQ-3-Backup --exclude-tag=.nobackup --one-file-system --ignore-failed-read -czf $tmpdir/usr_local.tar.gz usr/local }
   }
   
-  cd /tmp/
+  cd $tmpdir/
   #sign the configuration with the current key
   exec crypttool -s -t 1 <usr_local.tar.gz >signature
   #store the current key index
   exec crypttool -g -t 1 >key_index
-  file copy -force /boot/VERSION firmware_version
-  set fd [open "|tar c usr_local.tar.gz signature firmware_version key_index"]
-  catch {fconfigure $fd -translation binary}
-  catch {fconfigure $fd -encoding binary}
-  puts "Content-Type:application/x-download"
-  puts "Content-Disposition:attachment;filename=[set HOSTNAME]-$year-$month-$day.sbk\n"
-  catch {fconfigure stdout -translation binary}
-  catch {fconfigure stdout -encoding binary}
-  while { ! [eof $fd]} {
-    puts -nonewline [read $fd 65536]
-  }
-  close $fd
-  file delete -force /tmp/usr_local.tar.gz /tmp/firmware_version /tmp/signature
-}
\ No newline at end of file
+  file copy -force /VERSION firmware_version
+  catch { exec tar --owner=root --group=root -cf /usr/local/tmp/last_backup.sbk usr_local.tar.gz signature firmware_version key_index }
+  cd /
+  exec rm -rf $tmpdir
+  puts "X-Sendfile: /usr/local/tmp/last_backup.sbk"
+  puts "Content-Type: application/octet-stream"
+  puts "Content-Disposition: attachment; filename=\"$backupfile\"\n"
+}
--- occu/WebUI/www/config/cp_maintenance.cgi.orig
+++ occu/WebUI/www/config/cp_maintenance.cgi
@@ -254,13 +254,12 @@
         regaMonitor.stop();
         InterfaceMonitor.stop();
       }
-      //var pb = "action=update_start";
-      //var opts = {
-      //  postBody: pb,
-      //  sendXML: false
-      //};
-      //new Ajax.Request(url, opts);
-      window.location.href=url+"&action=update_start"
+      var pb = "action=update_start";
+      var opts = {
+        postBody: pb,
+        sendXML: false
+      };
+      new Ajax.Request(url, opts);
     }
   }
 }
@@ -278,8 +277,8 @@
     }
   } else {
    catch { exec /bin/sh -c "rm -rf `readlink -f /usr/local/.firmwareUpdate` /usr/local/.firmwareUpdate" }
-   catch { exec /bin/sh -c "rm -f /usr/local/tmp/EULA.*"}
-   catch { exec /bin/sh -c "rm -f /usr/local/tmp/update_script"}
+   catch { exec /bin/sh -c "rm -f /tmp/EULA.*"}
+   catch { exec /bin/sh -c "rm -f /usr/local/tmp/firmwareUpdateFile"}
   }
 
   cgi_javascript {
@@ -991,14 +990,7 @@
           const cb = document.getElementById('accept');
           const action = "acceptEula";
           if(cb.checked) {
-            //window.location.href=url+"&action=createBackup";
-            var pb = "action=createBackup";
-            var opts = {
-              postBody: pb,
-              sendXML: false,
-              asynchronous: false
-            };
-            new Ajax.Request(url, opts);
+            window.open(url+"&action=createBackup", "_blank");
           } 
           dlgPopup.hide();
           dlgPopup.setWidth(800);
@@ -1014,8 +1006,7 @@
 }
 
 proc action_createBackup {} {
-  http_head
-  catch { exec touch /tmp/createBackup }
+  [create_backup]
 }
 
 proc action_firmware_upload {} {
@@ -1059,35 +1050,80 @@
   } else {
 
     cd /usr/local/tmp/
-    set TMPDIR "[file tail $filename-dir]"
-    exec mkdir -p $TMPDIR
 
     #
     # check if the uploaded file is a valid firmware update file
     #
 
-    set file_invalid [catch {exec tar zxvf $filename update_script EULA.en EULA.de -C /usr/local/}]
+    catch { exec rm -f /usr/local/.firmwareUpdate /tmp/EULA.* }
+    set file_invalid 1
 
     # check for .tar.gz or .tar
-    if {$file_invalid == 0} {
+    if {$file_invalid != 0} {
       set file_invalid [catch {exec file -b $filename | egrep -q "(gzip compressed|tar archive)"} result]
       if {$file_invalid == 0} {
         # the file seems to be a tar archive (perhaps with gzip compression)
-        set file_invalid [catch {exec /bin/tar -C $TMPDIR --no-same-owner -xmf $filename} result]
-        file delete -force -- $filename
+        set file_invalid [catch {exec /bin/tar -C /tmp --warning=no-timestamp --no-same-owner --wildcards -xmf $filename "EULA.*"} result]
+        if {$file_invalid == 0} {
+          catch { exec ln -sfn $filename /usr/local/.firmwareUpdate }
+        }
+      }
+    }
+
+    # check for .zip
+    if {$file_invalid != 0} {
+      set file_invalid [catch {exec file -b $filename | grep -q "Zip archive data"} result]
+      if {$file_invalid == 0} {
+        # the file seems to be a zip archive containing data
+        set file_invalid [catch {exec /usr/bin/unzip -q -o -d /tmp $filename EULA.en EULA.de 2>/dev/null} result]
+        if {$file_invalid == 0} {
+          catch { exec ln -sfn $filename /usr/local/.firmwareUpdate }
+        }
+      }
+    }
+
+    # check for .img
+    if {$file_invalid != 0} {
+      set file_invalid [catch {exec file -b $filename | egrep -q "DOS/MBR boot sector.*"} result]
+      if {$file_invalid == 0} {
+        # the file seems to be a full-fledged SD card image with MBR boot sector, etc. so lets
+        # check if we have exactly 3 partitions
+        set file_invalid [catch {exec /usr/sbin/parted -sm $filename print 2>/dev/null | tail -1 | egrep -q "3:.*:ext4:"} result]
+        if {$file_invalid == 0} {
+          catch { exec ln -sfn $filename /usr/local/.firmwareUpdate }
+        }
+      }
+    }
+
+    # check for ext4 rootfs filesystem
+    if {$file_invalid != 0} {
+      set file_invalid [catch {exec file -b $filename | egrep -q "ext4 filesystem.*rootfs"} result]
+      if {$file_invalid == 0} {
+        # the file seems to be an ext4 fs of the rootfs lets check if the ext4 is valid
+        set file_invalid [catch {exec /sbin/e2fsck -nf $filename 2>/dev/null} result]
+        if {$file_invalid == 0} {
+          catch { exec ln -sfn $filename /usr/local/.firmwareUpdate }
+        }
+      }
+    }
+
+    # check for vfat bootfs filesystem
+    if {$file_invalid != 0} {
+      set file_invalid [catch {exec file -b $filename | egrep -q "DOS/MBR boot sector.*bootfs.*FAT"} result]
+      if {$file_invalid == 0} {
+        catch { exec ln -sfn $filename /usr/local/.firmwareUpdate }
       }
     }
 
     #
     # test if the above checks were successfull or not
     #
-    if {$file_invalid == 0} {
-      catch { exec ln -sf tmp/$TMPDIR /usr/local/.firmwareUpdate }
+    if { $file_invalid == 0 && [file exists /usr/local/.firmwareUpdate] } {
       #set action "acceptEula"
       set action "askCreateBackup"
     } else {
       file delete -force -- $filename
-      file delete -force -- $filename-dir
+      catch { exec rm -f /usr/local/.firmwareUpdate /tmp/EULA.* }
       set action "firmware_update_invalid"
     }
 
@@ -1282,10 +1318,6 @@
 }
 
 proc action_update_start {} {
-  if { [file exists "/tmp/createBackup"] } {
-    catch { [create_backup] }
-  }
-
   catch { exec killall hss_lcd }
   catch { exec lcdtool {Saving   Data...  } }
   rega system.Save()
--- occu/WebUI/www/config/cp_security.cgi.orig
+++ occu/WebUI/www/config/cp_security.cgi
@@ -78,8 +78,8 @@
 proc getSGTIN_Backup {migrationMode} {
 
   switch $migrationMode {
-    "CCU2_CCU2" {set path_crRFD "/tmp/backup/usr/local/etc/config/crRFD/data"}
-    "CCU2_CCU3" {set path_crRFD "/tmp/backup/usr/local/etc/config/crRFD/data"}
+    "CCU2_CCU2" {set path_crRFD "/usr/local/tmp/backup/usr/local/etc/config/crRFD/data"}
+    "CCU2_CCU3" {set path_crRFD "/usr/local/tmp/backup/usr/local/etc/config/crRFD/data"}
     "CCU3_CCU3" {set path_crRFD "/usr/local/eQ-3-Backup/restore/etc/config/crRFD/data"}
   }
 
@@ -136,8 +136,8 @@
 proc checkUserBackupValidility {migrationMode} {
 
   switch $migrationMode {
-    "CCU2_CCU2" {set pathBackup "/tmp/backup/usr/local/"}
-    "CCU2_CCU3" {set pathBackup "/tmp/backup/usr/local/"}
+    "CCU2_CCU2" {set pathBackup "/usr/local/tmp/backup/usr/local/"}
+    "CCU2_CCU3" {set pathBackup "/usr/local/tmp/backup/usr/local/"}
     "CCU3_CCU3" {set pathBackup "/usr/local/eQ-3-Backup/restore/"}
   }
 
@@ -297,7 +297,7 @@
     } else {
       exec touch /usr/local/.doFactoryReset
     }
-    exec kill -SIGQUIT 1
+    exec /sbin/reboot -d 2 2>/dev/null >/dev/null &
   }]} {
 
     # TWIST-22
@@ -372,13 +372,13 @@
 
 proc action_backup_restore_check {} {
   global env
-  cd /tmp/
+  cd /usr/local/tmp/
   
   http_head
   set i 0
   if { [catch {
-    exec tar xf new_config.tar
-    file delete -force /tmp/new_config.tar
+    exec tar --warning=no-timestamp --no-same-owner -xf /usr/local/tmp/new_config.tar 2>/dev/null
+    file delete -force /usr/local/tmp/new_config.tar
   
   set config_version [read_version "firmware_version"]
   set ccu1_backup false
@@ -510,10 +510,10 @@
 
 proc action_backup_restore_go {} {
   global env
-  cd /tmp/
+  cd /usr/local/tmp/
   http_head
     
-  set system_version [read_version "/boot/VERSION"]
+  set system_version [read_version "/VERSION"]
   set config_version [read_version "firmware_version"]
   set ccu1_backup false
   if { [version_compare $config_version 2.0.0] < 0 } {
@@ -596,20 +596,20 @@
     if { "CCU2_CCU2" == $migration_mode } {
       # CCU2 ==> CCU2
       set backuperror false
-      set source_version [read_version "/tmp/firmware_version"]
+      set source_version [read_version "/usr/local/tmp/firmware_version"]
       set source_version [split $source_version .]
       set source_major [lindex $source_version 0]
       set source_minor [lindex $source_version 1]
       set source_patch [lindex $source_version 2]
       if { (($source_major == 2)  && ($source_minor > 17)) || (($source_major == 2) && ($source_minor == 17) && ($source_patch >= 14))} {
-        # extract backup to /tmp to enable checkUsrBackup.sh to validate backup
-        file delete -force /tmp/backup
-        file mkdir /tmp/backup
-        cd /tmp/backup
-        if { [catch {exec tar xzf /tmp/usr_local.tar.gz} errorMessage] } {
+        # extract backup to /usr/local/tmp to enable checkUsrBackup.sh to validate backup
+        file delete -force /usr/local/tmp/backup
+        file mkdir /usr/local/tmp/backup
+        cd /usr/local/tmp/backup
+        if { [catch {exec tar --warning=no-timestamp --no-same-owner -xf /usr/local/tmp/usr_local.tar.gz} errorMessage] } {
           cgi_javascript {puts "MessageBox.close();"}
           put_message "\${dialogSettingsSecurityMessageSysBackupErrorTitle}" "\${dialogSettingsSecurityMessageSysBackupErrorContent} $errorMessage"
-          file delete -force /tmp/firmware_version /tmp/signature /tmp/usr_local.tar.gz /tmp/backup
+          file delete -force /usr/local/tmp/firmware_version /usr/local/tmp/signature /usr/local/tmp/usr_local.tar.gz /usr/local/tmp/backup
           return
           #set backuperror true
         } else {
@@ -622,7 +622,7 @@
             # Start /etc/init.d/S62HMServer start
             cgi_javascript {puts "MessageBox.close();"}
             put_message "\${dialogSettingsSecurityMessageSysBackupErrorTitle}" "\${dialogSettingsSecurityMessageSysBackupErrorContent} [getBackupErrorMessage $checkBackupState $migration_mode]"
-            file delete -force /tmp/firmware_version /tmp/signature /tmp/usr_local.tar.gz /tmp/backup
+            file delete -force /usr/local/tmp/firmware_version /usr/local/tmp/signature /usr/local/tmp/usr_local.tar.gz /usr/local/tmp/backup
             cgi_javascript {puts "homematic('User.restartHmIPServer');"}
             return
           } 
@@ -646,7 +646,7 @@
           # append msg $errorMessage
           cgi_javascript {puts "MessageBox.close();"}
           put_message "\${dialogSettingsSecurityMessageSysBackupErrorTitle}" "\${dialogSettingsSecurityMessageSysBackupErrorContent} $errorMessage"
-          file delete -force /tmp/firmware_version /tmp/signature /tmp/usr_local.tar.gz /tmp/backup
+          file delete -force /usr/local/tmp/firmware_version /usr/local/tmp/signature /usr/local/tmp/usr_local.tar.gz /usr/local/tmp/backup
           return
         } else {
           set backuperror false
@@ -658,24 +658,25 @@
     file delete -force /usr/local/eQ-3-Backup/restore
     file mkdir /usr/local/eQ-3-Backup/restore
     cd /usr/local/eQ-3-Backup/restore
-      if { [catch {exec tar xzf /tmp/usr_local.tar.gz --strip 2} errorMessage] } {
+      if { [catch {exec tar --warning=no-timestamp --no-same-owner -xf /usr/local/tmp/usr_local.tar.gz --strip 2} errorMessage] } {
           # show message "Beim Einspielen des Systembackups ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut. "
           cgi_javascript {puts "MessageBox.close();"}
           put_message "\${dialogSettingsSecurityMessageSysBackupErrorTitle}" "\${dialogSettingsSecurityMessageSysBackupErrorContent} $errorMessage"
           set backuperror true
         } else {
           set backuperror false
+          exec touch /usr/local/.doBackupRestore
         }
     } elseif { "CCU2_CCU3" == $migration_mode } {
           # CCU2 ==> CCU3
-        # be sure /tmp/backup is empty
-        file delete -force /tmp/backup
+        # be sure /usr/local/tmp/backup is empty
+        file delete -force /usr/local/tmp/backup
         # be sure restore directory is empty
         file delete -force /usr/local/eQ-3-Backup/restore
-        file mkdir /tmp/backup
+        file mkdir /usr/local/tmp/backup
 
-        cd /tmp/backup
-        if { [catch {exec tar xzf /tmp/usr_local.tar.gz} errorMessage] } {
+        cd /usr/local/tmp/backup
+        if { [catch {exec tar --warning=no-timestamp --no-same-owner -xf /usr/local/tmp/usr_local.tar.gz} errorMessage] } {
           cgi_javascript {puts "MessageBox.close();"}
           put_message "\${dialogSettingsSecurityMessageSysBackupErrorTitle}" "\${dialogSettingsSecurityMessageSysBackupErrorContent} $errorMessage"
           set backuperror true
@@ -683,8 +684,8 @@
           # only do this when the compatibility check says ok:
           #copy old files
           file mkdir /usr/local/eQ-3-Backup/restore/etc/config
-          if { [file exists /tmp/backup/usr/local/etc/config] } {
-            cd /tmp/backup/usr/local/etc/config
+          if { [file exists /usr/local/tmp/backup/usr/local/etc/config] } {
+            cd /usr/local/tmp/backup/usr/local/etc/config
           }
 
           if { [file exists InterfacesList.xml] } { file copy InterfacesList.xml /usr/local/eQ-3-Backup/restore/etc/config/InterfacesList.xml }
@@ -717,26 +718,31 @@
 
           set backuperror false
           cd /
+          exec touch /usr/local/.doBackupRestore
         }
       }
     } else {  # backup for version < 2
+      catch {
+        exec pkill ReGaHss
+        exec sleep 5
+      }
       #delete existing files
-      file delete -force /tmp/backup
+      file delete -force /usr/local/tmp/backup
       file delete -force /etc/config/hs485d /etc/config/hs485types /etc/config/rfd /etc/config/userprofiles
       file delete -force /etc/config/homematic.regadom /etc/config/homematic.regadom.bak
       file delete -force /etc/config/ids /etc/config/ntpclient /etc/config/rega.conf /etc/config/syslog
       file delete -force /etc/config/tweaks /etc/config/TZ /etc/config/server.pem /etc/config/keys
       file delete -force /etc/config/time.conf
 
-      file mkdir /tmp/backup
-      cd /tmp/backup
-      if { [catch {exec tar xzf /tmp/usr_local.tar.gz} errorMessage] } {
+      file mkdir /usr/local/tmp/backup
+      cd /usr/local/tmp/backup
+      if { [catch {exec tar --warning=no-timestamp --no-same-owner -xf /usr/local/tmp/usr_local.tar.gz} errorMessage] } {
         put_message "\${dialogSettingsSecurityMessageSysBackupErrorTitle}" "\${dialogSettingsSecurityMessageSysBackupErrorContent} $errorMessage"
         set backuperror true
       } else {
         #copy old files
-        if { [file exists /tmp/backup/usr/local/etc/config] } {
-          cd /tmp/backup/usr/local/etc/config
+        if { [file exists /usr/local/tmp/backup/usr/local/etc/config] } {
+          cd /usr/local/tmp/backup/usr/local/etc/config
         }
 
         if { [file exists hs485d] } { file copy hs485d /etc/config/hs485d }
@@ -790,11 +796,13 @@
         catch {exec eq3configcmd rfd-interface-copy rfd.conf /etc/config/rfd.conf}
 
         set backuperror false
+        exec /sbin/reboot -d 2 2>/dev/null >/dev/null &
+        return
       }
     cd /
   }
 
-  set source_version [read_version "/tmp/firmware_version"]
+  set source_version [read_version "/usr/local/tmp/firmware_version"]
 
   set source_version [split $source_version .]
   set source_major [lindex $source_version 0]
@@ -818,8 +826,7 @@
   cgi_javascript {puts "MessageBox.close();"}
 
   if { "false" == $backuperror } {
-    exec mount -o remount,ro /usr/local
-    exec mount -o remount,rw /usr/local
+    exec sync
     division {class="popupTitle"} {
       puts "\${dialogSettingsSecurityMessageSysBackupRestartSystemTitle}"
     }
@@ -860,8 +867,6 @@
   cgi_javascript {
     puts "translatePage('#messagebox');"
   }
-
-  file delete -force /tmp/new_config.tar /tmp/firmware_version /tmp/signature /tmp/usr_local.tar.gz /tmp/backup
 }
 
 proc put_message {title msg args} {
--- occu/WebUI/www/webui/js/lang/de/translate.lang.extension.js.orig
+++ occu/WebUI/www/webui/js/lang/de/translate.lang.extension.js
@@ -253,7 +253,7 @@
     "lanGatewayLblStandard" : "(Standard)",
     "commentSettingsDialogMaintenancePerformSoftwareUpdate" : "***********************************************",
     "dialogSettingsCMDialogPerformSoftwareUpdateTitle" : "Software-Update",
-    "dialogSettingsCMDialogPerformSoftwareUpdateP1" : "Das Software-Update wird jetzt durchgef%FChrt. Nach dem Update wird die " + HMIdentifier.de.CCUShortName + " automatisch neu gestartet.",
+    "dialogSettingsCMDialogPerformSoftwareUpdateP1" : HMIdentifier.de.CCUFullNameText + " wird nun neu gestartet und im Anschluss das Software-Update durchgef%FChrt. Dies kann je nach eingesetzter Hardware von wenigen Minuten bis zu einer halben Stunde dauern. Nach erfolgtem Software-Update wird die Zentrale ein zweites mal neu gestartet.<br/><br/>Zum %DCberwachen des Fortschrittes des Software-Updates k%F6nnen Sie nach dem ersten Neustart der Zentrale diese Seite in Ihrem Browser neu laden lassen und sollten daraufhin Ausgaben der Durchf%FChrung des Software-Updates angezeigt bekommen.",
     "dialogSettingsCMDialogPerformSoftwareUpdateP2" : "Es wird dringend empfohlen, nach dem Update den Cache Ihres Webbrowsers zu l%F6schen. Gehen Sie dabei folgenderma%DFen vor:",
     "dialogSettingsCMDialogPerformSoftwareUpdateLi1" : "Beenden Sie die aktuelle Browser-Sitzung.",
     "dialogSettingsCMDialogPerformSoftwareUpdateLi2" : "L%F6schen Sie den Cache Ihres Webbrowsers.<br />Hinweise dazu erhalten Sie in dem Tutorial <a href='http://www.eq-3.de/service/faq.html?id=38' target='_blank'>WebUI Firmware Update: Browser-Cache leeren</a> auf http://www.eq-3.de",
--- occu/WebUI/www/webui/js/lang/en/translate.lang.extension.js.orig
+++ occu/WebUI/www/webui/js/lang/en/translate.lang.extension.js
@@ -253,7 +253,7 @@
     "lanGatewayLblStandard" : "(Default)",
     "commentSettingsDialogMaintenancePerformSoftwareUpdate" : "***********************************************",
     "dialogSettingsCMDialogPerformSoftwareUpdateTitle" : "Software update",
-    "dialogSettingsCMDialogPerformSoftwareUpdateP1" : "The software update is now in progress. After the update has been performed, the " + HMIdentifier.en.CCUShortName + " will be restarted automatically.",
+    "dialogSettingsCMDialogPerformSoftwareUpdateP1" : HMIdentifier.en.CCUFullNameText + " will be rebooted now and the software update applied accordingly. Depending on the used hardware the software update can take several minutes until half an hour. After the update has been finished the central will reboot a last time.<br/><br/>To monitor the software update process, you can refresh this web page after the first reboot so that output of the update process should be displayed accordingly.",
     "dialogSettingsCMDialogPerformSoftwareUpdateP2" : "It is highly recommended to delete the cache of your browser, after the update has been performed. Therefore, please proceed as follows:",
     "dialogSettingsCMDialogPerformSoftwareUpdateLi1" : "Close all browser windows.",
     "dialogSettingsCMDialogPerformSoftwareUpdateLi2" : "Please delete the cache of your browser.<br />You will find further information in the tutorial <a href='http://www.eq-3.de/service/faq.html?id=38' target='_blank'>Web-UI Firmware Update: Browser-Cache leeren</a> on http://www.eq-3.de",
