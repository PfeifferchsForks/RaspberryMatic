--- occu/WebUI/www/config/cp_security.cgi.orig
+++ occu/WebUI/www/config/cp_security.cgi
@@ -1497,7 +1497,7 @@
         }
       };
     }
-    puts "translatePage();"
+    puts "translatePage('#messagebox');"
     puts "dlgPopup.readaptSize();"
   }
 }
--- occu/WebUI/www/webui/js/lang/translate.js.orig
+++ occu/WebUI/www/webui/js/lang/translate.js
@@ -1,3 +1,8 @@
+
+// This one should not be initialized for each lang, 
+// as that is lateron used for indication of loaded Ressources
+var EscapedLangDict = {};
+
 function isNoProgramScript(cont) {
   if ((cont == "#prgrulecontent") || (jQuery("#scrinp").length > 0)) {
     return false;
@@ -12,8 +17,8 @@
   container = (cont == undefined) ? container : cont;
 
   jQuery(container)
-    .addBack()
     .find("*")
+    .addBack()
     .contents()
     .filter(function () {
       return this.nodeType === 3;
@@ -68,12 +73,32 @@
  * @param {string} key The key to translate
  * @return {*} The translated key
  */
-function translateKey(key) {
-  //if (HMIdentifier[getLang()] == {} || langJSON[getLang()] == {}) {
-  if (Object.keys(HMIdentifier[getLang()]).length === 0 || Object.keys(langJSON[getLang()]).length === 0) {
-    loadTextResource();
+function translateKey(key, lang) {
+  if(null == lang) lang = getLang();
+  // This check is more performant then always processing all Keys.
+  if(EscapedLangDict[lang] === undefined) {
+    if (Object.keys(HMIdentifier[lang]).length === 0 ||
+        Object.keys(langJSON[lang]).length === 0) {
+      loadTextResource();
+    } else {
+      EscapedLangDict[lang] = {};
+    }
+    var text = langJSON[lang][key];
+    if(text === undefined) text = key;
+    return unescape(text);
   }
-  return unescape((langJSON[getLang()][key] != undefined) ? langJSON[getLang()][key] : key);
+  
+  // Check if we already have an escaped variant of the ressource
+  if(EscapedLangDict[lang][key] !== undefined) {
+    return EscapedLangDict[lang][key];
+  }
+
+  // Get ressource, escape and cach it
+  var keyText = langJSON[lang][key];
+  if(keyText === undefined) keyText = key;
+  var result = unescape(keyText);
+  EscapedLangDict[lang][key] = result;
+  return result;
 }
 
 /**
@@ -97,10 +122,10 @@
  */
 function translateJSTemplate(container) {
   var origKey, translatedKey;
-
-  jQuery.each(jQuery(container+" *[name]"), function() {
-    origKey = jQuery(this).attr("name");
-    translatedKey =  translateKey(origKey);
+  var lang = getLang();
+  jQuery.each(jQuery(container+" *[name]"), function(i, e) {
+    origKey = e.getAttribute("name");
+    translatedKey =  translateKey(origKey, lang);
 
     // Set the html of an element or the title of an image only if a valid translation is available.
     if (origKey != translatedKey) {
@@ -109,11 +134,17 @@
       switch (this.tagName) {
         case "IMG":
           // An image gets the tooltip translated.
-          jQuery(this).attr("title", translatedKey);
+          e.setAttribute("title", translatedKey);
           break;
         default:
-          // All other elements are getting the innerHTML replaced
-          jQuery(this).html(translatedKey);
+          // Replacing textContent with translation is faster
+          // but elements with html tags <..> have to be stored
+          // using innerHTML
+          if(translatedKey.indexOf("<") >= 0) {
+            e.innerHTML = translatedKey;
+          } else {
+            e.textContent = translatedKey;
+          }
           break;
       }
     }
--- occu/WebUI/www/webui/webui.js.orig
+++ occu/WebUI/www/webui/webui.js
@@ -21390,16 +21390,17 @@
       setFooter(this.FLAT_FOOTER_HTML);
     }
 
-    jQuery(".j_chMode").each(function(){
-      var elm = jQuery(this);
-
-        switch (elm.text()) {
-          case "Gesichert":
-            elm.html(translateKey("lblSecured"));
-            break;
-          case "Standard":
-            elm.html(translateKey("lblStandard"));
-        }
+    var translatedSecure = translateKey("lblSecured");
+    var translatedStandard = translateKey("lblStandard");
+    jQuery(".j_chMode").each(function(i, e){
+      switch (e.textContent) {
+        case "Gesichert":
+          e.textContent = translatedSecure;
+          break;
+        case "Standard":
+          e.textContent = translatedStandard;
+          break;
+      }
     });
 
     translateJSTemplate("#DeviceListTable");
