#!/bin/sh
# shellcheck shell=dash disable=SC2169
#
# start script to check if there are any update jobs
# waiting which we can perform during bootup automatically.
#

start() {
  echo -n "Checking for Auto-Update Jobs: "

  # check if there is something mounted at /media/usbX
  USB_DIR=$(mount | grep "/media/usb" | cut -f3 -d" ")
  if [[ -n "${USB_DIR}" ]]; then
    # if dir /media/usbX/ccu-update.bin exists we copy
    # all data to /usr/local/tmp
    if [[ -f "${USB_DIR}/ccu-update.bin" ]]; then
      echo "found USB update file (${USB_DIR}/ccu-update.bin)... "

      # remount usb disk read-only for safety reasons
      mount -o ro,remount "${USB_DIR}"

      # remounte userfs as read-write so that we can start the firmware
      # update
      mount -o rw,remount /userfs
      filename=$(mktemp -p /usr/local/tmp)
      if cp -a "${USB_DIR}/ccu-update.bin" "${filename}"; then
        # run unattended firmware update
        if ! ( set -o pipefail; /bin/fwinstall.sh "${filename}" 2>&1 | tee /tmp/fwinstall.log ); then
          cat /tmp/fwinstall*.pid | xargs kill 2>/dev/null

          # firmware update failed, lets change to
          # interactive mode
          echo "ERROR!"
        else
          cat /tmp/fwinstall*.pid | xargs kill 2>/dev/null

          # firmware update succeeded, lets reboot!
          rm -f /usr/local/.firmwareUpdate
          mount -o ro,remount /userfs

          echo "OK, rebooting"
          /sbin/reboot
          exit 1
        fi
      else
        echo "ERROR: copy failed"
      fi
    fi
  fi

  # if /usr/local/.firmwareUpdate is a link to a directory
  # or file we perform an unattended firmware update
  if [[ -L /usr/local/.firmwareUpdate ]]; then
    echo "found waiting firmware update... "

    FWINSTALL_PARAM=""

    # if .firmwareUpdate is a link to a directory we check
    # if this directory only contains a single tar/gz file
    # and if so we use that as an option to fwinstall.sh
    if [[ -d /usr/local/.firmwareUpdate ]]; then
      # if only one compressed file is present,
      # run fwinstall.sh with filename to make it extract the file
      # shellcheck disable=SC2012
      if [[ "$(ls -1 /usr/local/.firmwareUpdate | wc -l)" -eq 1 ]]; then
        # read link to avoid circular reference
        FILEPATH="$(readlink -f /usr/local/.firmwareUpdate)/$(ls -1 /usr/local/.firmwareUpdate)"
        if file -b "${FILEPATH}" | grep -E -q "(gzip compressed|tar archive)"; then
          echo "Found compressed update file ${FILEPATH}"
          FWINSTALL_PARAM=${FILEPATH}
        fi
      fi
    elif [[ -f /usr/local/.firmwareUpdate ]]; then
      # .firmwareUpdate is a link to a file so we use that as a sole option
      # to fwinstall.sh to let it extract it before using it.
      FWINSTALL_PARAM=$(readlink -f /usr/local/.firmwareUpdate)
    else
      echo "ERROR: invalid firmware update"
      exit 1
    fi

    # run unattended firmware update
    # (remount userfs in rw mode so that
    #  fwinstall.sh can extract data if necessary)
    mount -o rw,remount /userfs
    if ! ( set -o pipefail; /bin/fwinstall.sh "${FWINSTALL_PARAM}" 2>&1 | tee /tmp/fwinstall.log ); then
      cat /tmp/fwinstall*.pid | xargs kill 2>/dev/null

      # firmware update failed, lets change to
      # interactive mode
      echo "ERROR!"
    else
      cat /tmp/fwinstall*.pid | xargs kill 2>/dev/null

      # firmware update succeeded, lets reboot!
      mount -o rw,remount /userfs
      rm -f /usr/local/.firmwareUpdate
      mount -o ro,remount /userfs

      echo "OK, rebooting"

      /sbin/reboot
      exit 1
    fi

  else
    echo "not found, OK"
  fi

  # remount userfs in rw mode so that lighttpd
  # can upload data
  mount -o rw,remount /userfs
  rm -f /usr/local/.firmwareUpdate 2>/dev/null
}

restart() {
  start
}

case "$1" in
  start)
    start
  ;;
  stop)
    # nothing
  ;;
  restart|reload)
    restart
  ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac

exit $?
